// <h1>Базовые операторы Урок 8</h1>
// <h2>JavaScript Basic Operators Lesson 4</h2>
// <h3>Термины: «унарный», «бинарный», «операнд»</h3>


//Унарный
let x = 1;

x = -x;
alert( x ); // -1, применили унарный минус


//Бинарный
let x = 1, y = 3;
alert( y - x ); // 2, бинарный минус вычитает значения

//Сложение строк при помощи бинарного +
let s = "моя" + "строка";
alert(s); // моястрока

//Обратите внимание, если хотя бы один операнд является строкой, то второй будет также преобразован в строку.
alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"


alert(2 + 2 + '1' ); // будет "41", а не "221"

// Здесь операторы работают один за другим. 
// Первый + складывает два числа и возвращает 4, 
// затем следующий + объединяет результат со строкой, производя действие 4 + '1' = 41.
// Сложение и преобразование строк — это особенность бинарного плюса +. 

// Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.

//Например, вычитание и деление:
alert( 6 - '2' ); // 4, '2' приводится к числу
alert( '6' / '2' ); // 3, оба операнда приводятся к числам

//Чему будут равны переменные a, b, c и d в примере ниже?
let a = 1, b = 1;

let c = ++a; // ?
let d = b++; // ?

// Ответ:

// a = 2
// b = 2
// c = 2
// d = 1

let a = 1, b = 1;

alert( ++a ); // 2, префиксная форма возвращает новое значение
alert( b++ ); // 1, постфиксная форма возвращает старое значение

alert( a ); // 2, значение увеличено один раз
alert( b ); // 2, значение увеличено один раз

// ___________________________________________________________________________

//Чему будут равны переменные a и x после исполнения кода в примере ниже?

let a = 2;
let x = 1 + (a *= 2);


"" + 1 + 0 = "10" // (1)
"" - 1 + 0 = -1 // (2)
true + false = 1
6 / "3" = 2
"2" * "3" = 6
4 + 5 + "px" = "9px"
"$" + 4 + 5 = "$45"
"4" - 2 = 2
"4px" - 2 = NaN
7 / 0 = Infinity
"  -9  " + 5 = "  -9  5" // (3)
"  -9  " - 5 = -14 // (4)
null + 1 = 1 // (5)
undefined + 1 = NaN // (6)
" \t \n" - 2 = -2 // (7)

// Сложение со строкой "" + 1 преобразует 1 к строке: "" + 1 = "1", 
//и в следующем случае "1" + 0 работает то же самое правило.
// Вычитание - (как и большинство математических операторов) работает только с числами, 
//пустая строка "" приводится к 0.
// Сложение со строкой превращает число 5 в строку и добавляет к строке.
// Вычитание всегда преобразует к числу, значит строка " -9 " становится числом -9 
//(пробелы по краям обрезаются).
// null становится 0 после численного преобразования.
// undefined становится NaN после численного преобразования.
// Пробельные символы, такие как \t и \n, по краям строки игнорируются при преобразовании в число, 
//так что строка " \t \n", аналогично пустой строке, становится 0 после численного преобразования.

//___________________________________________________________________________

// Исправьте сложение
// Ниже приведён код, который запрашивает у пользователя два числа и показывает их сумму.
// Он работает неправильно. Код в примере выводит 12 (для значения полей по умолчанию).
// В чём ошибка? Исправьте её. Результат должен быть 3.

let a = prompt("Первое число?", 1);
let b = prompt("Второе число?", 2);

alert(a + b); // 12

//Нам нужно привести строки к числам перед применением оператора +. 
//Например, с помощью Number() или вставки + перед ними.
//Вставить + можно прямо перед prompt:

let a = +prompt("Первое число?", 1);
let b = +prompt("Второе число?", 2);

alert(a + b); // 3

//Или внутри alert:

let a = prompt("Первое число?", 1);
let b = prompt("Второе число?", 2);

alert(+a + +b); // 3