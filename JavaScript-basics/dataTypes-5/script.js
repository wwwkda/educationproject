

//Переменная в JavaScript может содержать любые данные. 
//В один момент там может быть строка, а в другой – число:
// Не будет ошибкой

let message = "hello";
message = 123456;

//1 тип. Числовой тип данных.
//Числовой тип данных (number) представляет как целочисленные значения, так и числа с плавающей точкой.
//Существует множество операций для чисел, например, умножение *, деление /, сложение +, вычитание - и так далее.
//Кроме обычных чисел, существуют так называемые «специальные числовые значения», которые относятся к этому типу данных: Infinity, -Infinity и NaN.
//Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.
//Мы можем получить его в результате деления на ноль:

alert( 1 / 0 ); // Infinity
alert( Infinity ); // Infinity

//NaN означает вычислительную ошибку. 
//Это результат неправильной или неопределённой математической операции, например:

alert( "не число" / 2 ); // NaN, такое деление является ошибкой
alert( "не число" / 2 + 5 ); // NaN


//Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами произвольной длины.
//Чтобы создать значение типа BigInt, необходимо добавить n в конец числового литерала:

// символ "n" в конце означает, что это BigInt
const bigInt = 1234567890123456789012345678901234567890n;

//2 тип. Строка
//Строка (string) в JavaScript должна быть заключена в кавычки.

let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;


//В JavaScript существует три типа кавычек.

//Двойные кавычки: "Привет".
//Одинарные кавычки: 'Привет'.
//Обратные кавычки: `Привет`.
//Двойные или одинарные кавычки являются «простыми», между ними нет разницы в JavaScript.

//Обратные же кавычки имеют расширенную функциональность. 
//Они позволяют нам встраивать выражения в строку, заключая их в ${…}. 
//Например:

let name = "Иван";

// Вставим переменную
alert( `Привет, ${name}!` ); // Привет, Иван!

// Вставим выражение
alert( `результат: ${1 + 2}` ); // результат: 3

// Выражение внутри ${…} вычисляется, и его результат становится частью строки. 
// Мы можем положить туда всё, что угодно: переменную name, или выражение 1 + 2, или что-то более сложное.

// Обратите внимание, что это можно делать только в обратных кавычках. 
// Другие кавычки не имеют такой функциональности встраивания!

alert( "результат: ${1 + 2}" ); // результат: ${1 + 2} (двойные кавычки ничего не делают)

//3 тип. Булевый (логический) тип

// Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь).

// Такой тип, как правило, используется для хранения значений да/нет: 
// true значит «да, правильно», а false значит «нет, не правильно».

let nameFieldChecked = true; // да, поле отмечено
let ageFieldChecked = false; // нет, поле не отмечено

//Булевые значения также могут быть результатом сравнений:

let isGreater = 4 > 1;
alert( isGreater ); // true (результатом сравнения будет "да")

//4 тип. Значение «null»

// Специальное значение null не относится ни к одному из типов, описанных выше.
// Оно формирует отдельный тип, который содержит только значение null:

let age = null;

//5 тип. Значение «undefined»

// Оно означает, что «значение не было присвоено».
// Если переменная объявлена, но ей не присвоено никакого значения, то её значением будет undefined:

let age;

alert(age); // выведет "undefined"

//Технически мы можем присвоить значение undefined любой переменной:

let age = 123;

// изменяем значение на undefined
age = undefined;

alert(age); // "undefined"



// 6 тип. Оператор typeof.
// Оператор typeof возвращает тип аргумента. 
// Это полезно, когда мы хотим обрабатывать значения различных типов по-разному 
// или просто хотим сделать проверку.

// У него есть две синтаксические формы:

// Синтаксис оператора: typeof x.
// Синтаксис функции: typeof(x).
// Другими словами, он работает со скобками или без скобок. Результат одинаковый.

// Вызов typeof x возвращает строку с именем типа:

typeof undefined // "undefined"

typeof 0 // "number"

typeof 10n // "bigint"

typeof true // "boolean"

typeof "foo" // "string"

typeof Symbol("id") // "symbol"

typeof Math // "object"  (1)

typeof null // "object"  (2)

typeof alert // "function"  (3)


//Обратные кавычки позволяют вставить выражение внутри ${...} в строку.

// Задание
// Что выведет этот скрипт?

let name = "Ilya"; // Ilya

alert( `hello ${1}` ); // hello 1

alert( `hello ${"name"}` ); // hello name

alert( `hello ${name}` ); // hello Ilya

//Обратные кавычки позволяют вставить выражение внутри ${...} в строку.

// let name = "Ilya";

// // выражение - число 1
// alert( `hello ${1}` ); // hello 1

// // выражение - строка "name"
// alert( `hello ${"name"}` ); // hello name

// // выражение - переменная, вставим её в строку
// alert( `hello ${name}` ); // hello Ilya

